#[
    OpenGL ES loader generated by glad 0.1.29 on Sat Apr  6 13:28:28 2019.

    Language/Generator: Nim
    Specification: gl
    APIs: gles2=2.0
    Profile: core
    Extensions:
        GL_KHR_debug
    Loader: True
    Local files: False
    Omit khrplatform: False
    Reproducible: False

    Commandline:
        --profile="core" --api="gles2=2.0" --generator="nim" --spec="gl" --extensions="GL_KHR_debug"
    Online:
        https://glad.dav1d.de/#profile=core&language=nim&specification=gl&loader=on&api=gles2%3D2.0&extensions=GL_KHR_debug
]#

import strutils

var glVersionMajor, glVersionMinor: int

# Types
type
  ClContext* = distinct pointer
  ClEvent* = distinct pointer
  GLbitfield* = uint32
  GLboolean* = bool
  GLbyte* = int8
  GLchar* = char
  GLcharARB* = byte
  GLclampd* = float64
  GLclampf* = float32
  GLclampx* = int32
  GLdouble* = float64
  GLeglImageOES* = distinct pointer
  GLenum* = uint32
  GLfixed* = int32
  GLfloat* = float32
  GLhalf* = uint16
  GLhalfARB* = uint16
  GLhalfNV* = uint16
  GLhandleARB* = uint32
  GLint* = int32
  GLint64* = int64
  GLint64EXT* = int64
  GLintptr* = int
  GLintptrARB* = int
  GLshort* = int16
  GLsizei* = int32
  GLsizeiptr* = int
  GLsizeiptrARB* = int
  GLsync* = distinct pointer
  GLubyte* = uint8
  GLuint* = uint32
  GLuint64* = uint64
  GLuint64EXT* = uint64
  GLushort* = uint16
  GLvdpauSurfaceNV* = int32
  GLvoid* = pointer

  GLdebugProc* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcArb* = proc (
    source: GLenum,
    typ: GLenum,
    id: GLuint,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcAmd* = proc (
    id: GLuint,
    category: GLenum,
    severity: GLenum,
    len: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}

  GLdebugProcKhr* = proc (
    source, typ: GLenum,
    id: GLuint,
    severity: GLenum,
    length: GLsizei,
    message: ptr GLchar,
    userParam: pointer) {.stdcall.}


# Enums
const
  GL_FALSE* = 0
  GL_INVALID_INDEX*: uint32 = uint32(0xFFFFFFFF)
  GL_NONE* = 0
  GL_NONE_OES* = 0
  GL_NO_ERROR* = 0
  GL_ONE* = 1
  GL_TIMEOUT_IGNORED*: uint64 = uint64(0xFFFFFFFFFFFFFFFF)
  GL_TIMEOUT_IGNORED_APPLE*: uint64 = uint64(0xFFFFFFFFFFFFFFFF)
  GL_TRUE* = 1
  GL_VERSION_ES_CL_1_0* = 1
  GL_VERSION_ES_CL_1_1* = 1
  GL_VERSION_ES_CM_1_1* = 1
  GL_ZERO* = 0

  GL_DEPTH_BUFFER_BIT*: GLenum = GLenum(0x00000100)
  GL_STENCIL_BUFFER_BIT*: GLenum = GLenum(0x00000400)
  GL_COLOR_BUFFER_BIT*: GLenum = GLenum(0x00004000)
  GL_POINTS*: GLenum = GLenum(0x0000)
  GL_LINES*: GLenum = GLenum(0x0001)
  GL_LINE_LOOP*: GLenum = GLenum(0x0002)
  GL_LINE_STRIP*: GLenum = GLenum(0x0003)
  GL_TRIANGLES*: GLenum = GLenum(0x0004)
  GL_TRIANGLE_STRIP*: GLenum = GLenum(0x0005)
  GL_TRIANGLE_FAN*: GLenum = GLenum(0x0006)
  GL_SRC_COLOR*: GLenum = GLenum(0x0300)
  GL_ONE_MINUS_SRC_COLOR*: GLenum = GLenum(0x0301)
  GL_SRC_ALPHA*: GLenum = GLenum(0x0302)
  GL_ONE_MINUS_SRC_ALPHA*: GLenum = GLenum(0x0303)
  GL_DST_ALPHA*: GLenum = GLenum(0x0304)
  GL_ONE_MINUS_DST_ALPHA*: GLenum = GLenum(0x0305)
  GL_DST_COLOR*: GLenum = GLenum(0x0306)
  GL_ONE_MINUS_DST_COLOR*: GLenum = GLenum(0x0307)
  GL_SRC_ALPHA_SATURATE*: GLenum = GLenum(0x0308)
  GL_FUNC_ADD*: GLenum = GLenum(0x8006)
  GL_BLEND_EQUATION*: GLenum = GLenum(0x8009)
  GL_BLEND_EQUATION_RGB*: GLenum = GLenum(0x8009)
  GL_BLEND_EQUATION_ALPHA*: GLenum = GLenum(0x883D)
  GL_FUNC_SUBTRACT*: GLenum = GLenum(0x800A)
  GL_FUNC_REVERSE_SUBTRACT*: GLenum = GLenum(0x800B)
  GL_BLEND_DST_RGB*: GLenum = GLenum(0x80C8)
  GL_BLEND_SRC_RGB*: GLenum = GLenum(0x80C9)
  GL_BLEND_DST_ALPHA*: GLenum = GLenum(0x80CA)
  GL_BLEND_SRC_ALPHA*: GLenum = GLenum(0x80CB)
  GL_CONSTANT_COLOR*: GLenum = GLenum(0x8001)
  GL_ONE_MINUS_CONSTANT_COLOR*: GLenum = GLenum(0x8002)
  GL_CONSTANT_ALPHA*: GLenum = GLenum(0x8003)
  GL_ONE_MINUS_CONSTANT_ALPHA*: GLenum = GLenum(0x8004)
  GL_BLEND_COLOR*: GLenum = GLenum(0x8005)
  GL_ARRAY_BUFFER*: GLenum = GLenum(0x8892)
  GL_ELEMENT_ARRAY_BUFFER*: GLenum = GLenum(0x8893)
  GL_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8894)
  GL_ELEMENT_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x8895)
  GL_STREAM_DRAW*: GLenum = GLenum(0x88E0)
  GL_STATIC_DRAW*: GLenum = GLenum(0x88E4)
  GL_DYNAMIC_DRAW*: GLenum = GLenum(0x88E8)
  GL_BUFFER_SIZE*: GLenum = GLenum(0x8764)
  GL_BUFFER_USAGE*: GLenum = GLenum(0x8765)
  GL_CURRENT_VERTEX_ATTRIB*: GLenum = GLenum(0x8626)
  GL_FRONT*: GLenum = GLenum(0x0404)
  GL_BACK*: GLenum = GLenum(0x0405)
  GL_FRONT_AND_BACK*: GLenum = GLenum(0x0408)
  GL_TEXTURE_2D*: GLenum = GLenum(0x0DE1)
  GL_CULL_FACE*: GLenum = GLenum(0x0B44)
  GL_BLEND*: GLenum = GLenum(0x0BE2)
  GL_DITHER*: GLenum = GLenum(0x0BD0)
  GL_STENCIL_TEST*: GLenum = GLenum(0x0B90)
  GL_DEPTH_TEST*: GLenum = GLenum(0x0B71)
  GL_SCISSOR_TEST*: GLenum = GLenum(0x0C11)
  GL_POLYGON_OFFSET_FILL*: GLenum = GLenum(0x8037)
  GL_SAMPLE_ALPHA_TO_COVERAGE*: GLenum = GLenum(0x809E)
  GL_SAMPLE_COVERAGE*: GLenum = GLenum(0x80A0)
  GL_INVALID_ENUM*: GLenum = GLenum(0x0500)
  GL_INVALID_VALUE*: GLenum = GLenum(0x0501)
  GL_INVALID_OPERATION*: GLenum = GLenum(0x0502)
  GL_OUT_OF_MEMORY*: GLenum = GLenum(0x0505)
  GL_CW*: GLenum = GLenum(0x0900)
  GL_CCW*: GLenum = GLenum(0x0901)
  GL_LINE_WIDTH*: GLenum = GLenum(0x0B21)
  GL_ALIASED_POINT_SIZE_RANGE*: GLenum = GLenum(0x846D)
  GL_ALIASED_LINE_WIDTH_RANGE*: GLenum = GLenum(0x846E)
  GL_CULL_FACE_MODE*: GLenum = GLenum(0x0B45)
  GL_FRONT_FACE*: GLenum = GLenum(0x0B46)
  GL_DEPTH_RANGE*: GLenum = GLenum(0x0B70)
  GL_DEPTH_WRITEMASK*: GLenum = GLenum(0x0B72)
  GL_DEPTH_CLEAR_VALUE*: GLenum = GLenum(0x0B73)
  GL_DEPTH_FUNC*: GLenum = GLenum(0x0B74)
  GL_STENCIL_CLEAR_VALUE*: GLenum = GLenum(0x0B91)
  GL_STENCIL_FUNC*: GLenum = GLenum(0x0B92)
  GL_STENCIL_FAIL*: GLenum = GLenum(0x0B94)
  GL_STENCIL_PASS_DEPTH_FAIL*: GLenum = GLenum(0x0B95)
  GL_STENCIL_PASS_DEPTH_PASS*: GLenum = GLenum(0x0B96)
  GL_STENCIL_REF*: GLenum = GLenum(0x0B97)
  GL_STENCIL_VALUE_MASK*: GLenum = GLenum(0x0B93)
  GL_STENCIL_WRITEMASK*: GLenum = GLenum(0x0B98)
  GL_STENCIL_BACK_FUNC*: GLenum = GLenum(0x8800)
  GL_STENCIL_BACK_FAIL*: GLenum = GLenum(0x8801)
  GL_STENCIL_BACK_PASS_DEPTH_FAIL*: GLenum = GLenum(0x8802)
  GL_STENCIL_BACK_PASS_DEPTH_PASS*: GLenum = GLenum(0x8803)
  GL_STENCIL_BACK_REF*: GLenum = GLenum(0x8CA3)
  GL_STENCIL_BACK_VALUE_MASK*: GLenum = GLenum(0x8CA4)
  GL_STENCIL_BACK_WRITEMASK*: GLenum = GLenum(0x8CA5)
  GL_VIEWPORT*: GLenum = GLenum(0x0BA2)
  GL_SCISSOR_BOX*: GLenum = GLenum(0x0C10)
  GL_COLOR_CLEAR_VALUE*: GLenum = GLenum(0x0C22)
  GL_COLOR_WRITEMASK*: GLenum = GLenum(0x0C23)
  GL_UNPACK_ALIGNMENT*: GLenum = GLenum(0x0CF5)
  GL_PACK_ALIGNMENT*: GLenum = GLenum(0x0D05)
  GL_MAX_TEXTURE_SIZE*: GLenum = GLenum(0x0D33)
  GL_MAX_VIEWPORT_DIMS*: GLenum = GLenum(0x0D3A)
  GL_SUBPIXEL_BITS*: GLenum = GLenum(0x0D50)
  GL_RED_BITS*: GLenum = GLenum(0x0D52)
  GL_GREEN_BITS*: GLenum = GLenum(0x0D53)
  GL_BLUE_BITS*: GLenum = GLenum(0x0D54)
  GL_ALPHA_BITS*: GLenum = GLenum(0x0D55)
  GL_DEPTH_BITS*: GLenum = GLenum(0x0D56)
  GL_STENCIL_BITS*: GLenum = GLenum(0x0D57)
  GL_POLYGON_OFFSET_UNITS*: GLenum = GLenum(0x2A00)
  GL_POLYGON_OFFSET_FACTOR*: GLenum = GLenum(0x8038)
  GL_TEXTURE_BINDING_2D*: GLenum = GLenum(0x8069)
  GL_SAMPLE_BUFFERS*: GLenum = GLenum(0x80A8)
  GL_SAMPLES*: GLenum = GLenum(0x80A9)
  GL_SAMPLE_COVERAGE_VALUE*: GLenum = GLenum(0x80AA)
  GL_SAMPLE_COVERAGE_INVERT*: GLenum = GLenum(0x80AB)
  GL_NUM_COMPRESSED_TEXTURE_FORMATS*: GLenum = GLenum(0x86A2)
  GL_COMPRESSED_TEXTURE_FORMATS*: GLenum = GLenum(0x86A3)
  GL_DONT_CARE*: GLenum = GLenum(0x1100)
  GL_FASTEST*: GLenum = GLenum(0x1101)
  GL_NICEST*: GLenum = GLenum(0x1102)
  GL_GENERATE_MIPMAP_HINT*: GLenum = GLenum(0x8192)
  cGL_BYTE*: GLenum = GLenum(0x1400)
  GL_UNSIGNED_BYTE*: GLenum = GLenum(0x1401)
  cGL_SHORT*: GLenum = GLenum(0x1402)
  GL_UNSIGNED_SHORT*: GLenum = GLenum(0x1403)
  cGL_INT*: GLenum = GLenum(0x1404)
  GL_UNSIGNED_INT*: GLenum = GLenum(0x1405)
  cGL_FLOAT*: GLenum = GLenum(0x1406)
  cGL_FIXED*: GLenum = GLenum(0x140C)
  GL_DEPTH_COMPONENT*: GLenum = GLenum(0x1902)
  GL_ALPHA*: GLenum = GLenum(0x1906)
  GL_RGB*: GLenum = GLenum(0x1907)
  GL_RGBA*: GLenum = GLenum(0x1908)
  GL_LUMINANCE*: GLenum = GLenum(0x1909)
  GL_LUMINANCE_ALPHA*: GLenum = GLenum(0x190A)
  GL_UNSIGNED_SHORT_4_4_4_4*: GLenum = GLenum(0x8033)
  GL_UNSIGNED_SHORT_5_5_5_1*: GLenum = GLenum(0x8034)
  GL_UNSIGNED_SHORT_5_6_5*: GLenum = GLenum(0x8363)
  GL_FRAGMENT_SHADER*: GLenum = GLenum(0x8B30)
  GL_VERTEX_SHADER*: GLenum = GLenum(0x8B31)
  GL_MAX_VERTEX_ATTRIBS*: GLenum = GLenum(0x8869)
  GL_MAX_VERTEX_UNIFORM_VECTORS*: GLenum = GLenum(0x8DFB)
  GL_MAX_VARYING_VECTORS*: GLenum = GLenum(0x8DFC)
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8B4D)
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8B4C)
  GL_MAX_TEXTURE_IMAGE_UNITS*: GLenum = GLenum(0x8872)
  GL_MAX_FRAGMENT_UNIFORM_VECTORS*: GLenum = GLenum(0x8DFD)
  GL_SHADER_TYPE*: GLenum = GLenum(0x8B4F)
  GL_DELETE_STATUS*: GLenum = GLenum(0x8B80)
  GL_LINK_STATUS*: GLenum = GLenum(0x8B82)
  GL_VALIDATE_STATUS*: GLenum = GLenum(0x8B83)
  GL_ATTACHED_SHADERS*: GLenum = GLenum(0x8B85)
  GL_ACTIVE_UNIFORMS*: GLenum = GLenum(0x8B86)
  GL_ACTIVE_UNIFORM_MAX_LENGTH*: GLenum = GLenum(0x8B87)
  GL_ACTIVE_ATTRIBUTES*: GLenum = GLenum(0x8B89)
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH*: GLenum = GLenum(0x8B8A)
  GL_SHADING_LANGUAGE_VERSION*: GLenum = GLenum(0x8B8C)
  GL_CURRENT_PROGRAM*: GLenum = GLenum(0x8B8D)
  GL_NEVER*: GLenum = GLenum(0x0200)
  GL_LESS*: GLenum = GLenum(0x0201)
  GL_EQUAL*: GLenum = GLenum(0x0202)
  GL_LEQUAL*: GLenum = GLenum(0x0203)
  GL_GREATER*: GLenum = GLenum(0x0204)
  GL_NOTEQUAL*: GLenum = GLenum(0x0205)
  GL_GEQUAL*: GLenum = GLenum(0x0206)
  GL_ALWAYS*: GLenum = GLenum(0x0207)
  GL_KEEP*: GLenum = GLenum(0x1E00)
  GL_REPLACE*: GLenum = GLenum(0x1E01)
  GL_INCR*: GLenum = GLenum(0x1E02)
  GL_DECR*: GLenum = GLenum(0x1E03)
  GL_INVERT*: GLenum = GLenum(0x150A)
  GL_INCR_WRAP*: GLenum = GLenum(0x8507)
  GL_DECR_WRAP*: GLenum = GLenum(0x8508)
  GL_VENDOR*: GLenum = GLenum(0x1F00)
  GL_RENDERER*: GLenum = GLenum(0x1F01)
  GL_VERSION*: GLenum = GLenum(0x1F02)
  GL_EXTENSIONS*: GLenum = GLenum(0x1F03)
  GL_NEAREST*: GLenum = GLenum(0x2600)
  GL_LINEAR*: GLenum = GLenum(0x2601)
  GL_NEAREST_MIPMAP_NEAREST*: GLenum = GLenum(0x2700)
  GL_LINEAR_MIPMAP_NEAREST*: GLenum = GLenum(0x2701)
  GL_NEAREST_MIPMAP_LINEAR*: GLenum = GLenum(0x2702)
  GL_LINEAR_MIPMAP_LINEAR*: GLenum = GLenum(0x2703)
  GL_TEXTURE_MAG_FILTER*: GLenum = GLenum(0x2800)
  GL_TEXTURE_MIN_FILTER*: GLenum = GLenum(0x2801)
  GL_TEXTURE_WRAP_S*: GLenum = GLenum(0x2802)
  GL_TEXTURE_WRAP_T*: GLenum = GLenum(0x2803)
  GL_TEXTURE*: GLenum = GLenum(0x1702)
  GL_TEXTURE_CUBE_MAP*: GLenum = GLenum(0x8513)
  GL_TEXTURE_BINDING_CUBE_MAP*: GLenum = GLenum(0x8514)
  GL_TEXTURE_CUBE_MAP_POSITIVE_X*: GLenum = GLenum(0x8515)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X*: GLenum = GLenum(0x8516)
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y*: GLenum = GLenum(0x8517)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y*: GLenum = GLenum(0x8518)
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z*: GLenum = GLenum(0x8519)
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z*: GLenum = GLenum(0x851A)
  GL_MAX_CUBE_MAP_TEXTURE_SIZE*: GLenum = GLenum(0x851C)
  GL_TEXTURE0*: GLenum = GLenum(0x84C0)
  GL_TEXTURE1*: GLenum = GLenum(0x84C1)
  GL_TEXTURE2*: GLenum = GLenum(0x84C2)
  GL_TEXTURE3*: GLenum = GLenum(0x84C3)
  GL_TEXTURE4*: GLenum = GLenum(0x84C4)
  GL_TEXTURE5*: GLenum = GLenum(0x84C5)
  GL_TEXTURE6*: GLenum = GLenum(0x84C6)
  GL_TEXTURE7*: GLenum = GLenum(0x84C7)
  GL_TEXTURE8*: GLenum = GLenum(0x84C8)
  GL_TEXTURE9*: GLenum = GLenum(0x84C9)
  GL_TEXTURE10*: GLenum = GLenum(0x84CA)
  GL_TEXTURE11*: GLenum = GLenum(0x84CB)
  GL_TEXTURE12*: GLenum = GLenum(0x84CC)
  GL_TEXTURE13*: GLenum = GLenum(0x84CD)
  GL_TEXTURE14*: GLenum = GLenum(0x84CE)
  GL_TEXTURE15*: GLenum = GLenum(0x84CF)
  GL_TEXTURE16*: GLenum = GLenum(0x84D0)
  GL_TEXTURE17*: GLenum = GLenum(0x84D1)
  GL_TEXTURE18*: GLenum = GLenum(0x84D2)
  GL_TEXTURE19*: GLenum = GLenum(0x84D3)
  GL_TEXTURE20*: GLenum = GLenum(0x84D4)
  GL_TEXTURE21*: GLenum = GLenum(0x84D5)
  GL_TEXTURE22*: GLenum = GLenum(0x84D6)
  GL_TEXTURE23*: GLenum = GLenum(0x84D7)
  GL_TEXTURE24*: GLenum = GLenum(0x84D8)
  GL_TEXTURE25*: GLenum = GLenum(0x84D9)
  GL_TEXTURE26*: GLenum = GLenum(0x84DA)
  GL_TEXTURE27*: GLenum = GLenum(0x84DB)
  GL_TEXTURE28*: GLenum = GLenum(0x84DC)
  GL_TEXTURE29*: GLenum = GLenum(0x84DD)
  GL_TEXTURE30*: GLenum = GLenum(0x84DE)
  GL_TEXTURE31*: GLenum = GLenum(0x84DF)
  GL_ACTIVE_TEXTURE*: GLenum = GLenum(0x84E0)
  GL_REPEAT*: GLenum = GLenum(0x2901)
  GL_CLAMP_TO_EDGE*: GLenum = GLenum(0x812F)
  GL_MIRRORED_REPEAT*: GLenum = GLenum(0x8370)
  GL_FLOAT_VEC2*: GLenum = GLenum(0x8B50)
  GL_FLOAT_VEC3*: GLenum = GLenum(0x8B51)
  GL_FLOAT_VEC4*: GLenum = GLenum(0x8B52)
  GL_INT_VEC2*: GLenum = GLenum(0x8B53)
  GL_INT_VEC3*: GLenum = GLenum(0x8B54)
  GL_INT_VEC4*: GLenum = GLenum(0x8B55)
  GL_BOOL*: GLenum = GLenum(0x8B56)
  GL_BOOL_VEC2*: GLenum = GLenum(0x8B57)
  GL_BOOL_VEC3*: GLenum = GLenum(0x8B58)
  GL_BOOL_VEC4*: GLenum = GLenum(0x8B59)
  GL_FLOAT_MAT2*: GLenum = GLenum(0x8B5A)
  GL_FLOAT_MAT3*: GLenum = GLenum(0x8B5B)
  GL_FLOAT_MAT4*: GLenum = GLenum(0x8B5C)
  GL_SAMPLER_2D*: GLenum = GLenum(0x8B5E)
  GL_SAMPLER_CUBE*: GLenum = GLenum(0x8B60)
  GL_VERTEX_ATTRIB_ARRAY_ENABLED*: GLenum = GLenum(0x8622)
  GL_VERTEX_ATTRIB_ARRAY_SIZE*: GLenum = GLenum(0x8623)
  GL_VERTEX_ATTRIB_ARRAY_STRIDE*: GLenum = GLenum(0x8624)
  GL_VERTEX_ATTRIB_ARRAY_TYPE*: GLenum = GLenum(0x8625)
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED*: GLenum = GLenum(0x886A)
  GL_VERTEX_ATTRIB_ARRAY_POINTER*: GLenum = GLenum(0x8645)
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*: GLenum = GLenum(0x889F)
  GL_IMPLEMENTATION_COLOR_READ_TYPE*: GLenum = GLenum(0x8B9A)
  GL_IMPLEMENTATION_COLOR_READ_FORMAT*: GLenum = GLenum(0x8B9B)
  GL_COMPILE_STATUS*: GLenum = GLenum(0x8B81)
  GL_INFO_LOG_LENGTH*: GLenum = GLenum(0x8B84)
  GL_SHADER_SOURCE_LENGTH*: GLenum = GLenum(0x8B88)
  GL_SHADER_COMPILER*: GLenum = GLenum(0x8DFA)
  GL_SHADER_BINARY_FORMATS*: GLenum = GLenum(0x8DF8)
  GL_NUM_SHADER_BINARY_FORMATS*: GLenum = GLenum(0x8DF9)
  GL_LOW_FLOAT*: GLenum = GLenum(0x8DF0)
  GL_MEDIUM_FLOAT*: GLenum = GLenum(0x8DF1)
  GL_HIGH_FLOAT*: GLenum = GLenum(0x8DF2)
  GL_LOW_INT*: GLenum = GLenum(0x8DF3)
  GL_MEDIUM_INT*: GLenum = GLenum(0x8DF4)
  GL_HIGH_INT*: GLenum = GLenum(0x8DF5)
  GL_FRAMEBUFFER*: GLenum = GLenum(0x8D40)
  GL_RENDERBUFFER*: GLenum = GLenum(0x8D41)
  GL_RGBA4*: GLenum = GLenum(0x8056)
  GL_RGB5_A1*: GLenum = GLenum(0x8057)
  GL_RGB565*: GLenum = GLenum(0x8D62)
  GL_DEPTH_COMPONENT16*: GLenum = GLenum(0x81A5)
  GL_STENCIL_INDEX8*: GLenum = GLenum(0x8D48)
  GL_RENDERBUFFER_WIDTH*: GLenum = GLenum(0x8D42)
  GL_RENDERBUFFER_HEIGHT*: GLenum = GLenum(0x8D43)
  GL_RENDERBUFFER_INTERNAL_FORMAT*: GLenum = GLenum(0x8D44)
  GL_RENDERBUFFER_RED_SIZE*: GLenum = GLenum(0x8D50)
  GL_RENDERBUFFER_GREEN_SIZE*: GLenum = GLenum(0x8D51)
  GL_RENDERBUFFER_BLUE_SIZE*: GLenum = GLenum(0x8D52)
  GL_RENDERBUFFER_ALPHA_SIZE*: GLenum = GLenum(0x8D53)
  GL_RENDERBUFFER_DEPTH_SIZE*: GLenum = GLenum(0x8D54)
  GL_RENDERBUFFER_STENCIL_SIZE*: GLenum = GLenum(0x8D55)
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE*: GLenum = GLenum(0x8CD0)
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME*: GLenum = GLenum(0x8CD1)
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL*: GLenum = GLenum(0x8CD2)
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE*: GLenum = GLenum(0x8CD3)
  GL_COLOR_ATTACHMENT0*: GLenum = GLenum(0x8CE0)
  GL_DEPTH_ATTACHMENT*: GLenum = GLenum(0x8D00)
  GL_STENCIL_ATTACHMENT*: GLenum = GLenum(0x8D20)
  GL_FRAMEBUFFER_COMPLETE*: GLenum = GLenum(0x8CD5)
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT*: GLenum = GLenum(0x8CD6)
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT*: GLenum = GLenum(0x8CD7)
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS*: GLenum = GLenum(0x8CD9)
  GL_FRAMEBUFFER_UNSUPPORTED*: GLenum = GLenum(0x8CDD)
  GL_FRAMEBUFFER_BINDING*: GLenum = GLenum(0x8CA6)
  GL_RENDERBUFFER_BINDING*: GLenum = GLenum(0x8CA7)
  GL_MAX_RENDERBUFFER_SIZE*: GLenum = GLenum(0x84E8)
  GL_INVALID_FRAMEBUFFER_OPERATION*: GLenum = GLenum(0x0506)


# Functions
var
  GLAD_GL_ES_VERSION_2_0*: bool

  glActiveTexture*: proc (texture: GLenum) {.cdecl.}
  glAttachShader*: proc (program: GLuint, shader: GLuint) {.cdecl.}
  glBindAttribLocation*: proc (program: GLuint, index: GLuint, name: cstring) {.cdecl.}
  glBindBuffer*: proc (target: GLenum, buffer: GLuint) {.cdecl.}
  glBindFramebuffer*: proc (target: GLenum, framebuffer: GLuint) {.cdecl.}
  glBindRenderbuffer*: proc (target: GLenum, renderbuffer: GLuint) {.cdecl.}
  glBindTexture*: proc (target: GLenum, texture: GLuint) {.cdecl.}
  glBlendColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}
  glBlendEquation*: proc (mode: GLenum) {.cdecl.}
  glBlendEquationSeparate*: proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl.}
  glBlendFunc*: proc (sfactor: GLenum, dfactor: GLenum) {.cdecl.}
  glBlendFuncSeparate*: proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl.}
  glBufferData*: proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl.}
  glBufferSubData*: proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl.}
  glCheckFramebufferStatus*: proc (target: GLenum): GLenum {.cdecl.}
  glClear*: proc (mask: GLbitfield) {.cdecl.}
  glClearColor*: proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}
  glClearDepthf*: proc (d: GLfloat) {.cdecl.}
  glClearStencil*: proc (s: GLint) {.cdecl.}
  glColorMask*: proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl.}
  glCompileShader*: proc (shader: GLuint) {.cdecl.}
  glCompressedTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl.}
  glCompressedTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl.}
  glCopyTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl.}
  glCopyTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}
  glCreateProgram*: proc (): GLuint {.cdecl.}
  glCreateShader*: proc (`type`: GLenum): GLuint {.cdecl.}
  glCullFace*: proc (mode: GLenum) {.cdecl.}
  glDeleteBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl.}
  glDeleteFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl.}
  glDeleteProgram*: proc (program: GLuint) {.cdecl.}
  glDeleteRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl.}
  glDeleteShader*: proc (shader: GLuint) {.cdecl.}
  glDeleteTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl.}
  glDepthFunc*: proc (`func`: GLenum) {.cdecl.}
  glDepthMask*: proc (flag: GLboolean) {.cdecl.}
  glDepthRangef*: proc (n: GLfloat, f: GLfloat) {.cdecl.}
  glDetachShader*: proc (program: GLuint, shader: GLuint) {.cdecl.}
  glDisable*: proc (cap: GLenum) {.cdecl.}
  glDisableVertexAttribArray*: proc (index: GLuint) {.cdecl.}
  glDrawArrays*: proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl.}
  glDrawElements*: proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl.}
  glEnable*: proc (cap: GLenum) {.cdecl.}
  glEnableVertexAttribArray*: proc (index: GLuint) {.cdecl.}
  glFinish*: proc () {.cdecl.}
  glFlush*: proc () {.cdecl.}
  glFramebufferRenderbuffer*: proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl.}
  glFramebufferTexture2D*: proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl.}
  glFrontFace*: proc (mode: GLenum) {.cdecl.}
  glGenBuffers*: proc (n: GLsizei, buffers: ptr GLuint) {.cdecl.}
  glGenerateMipmap*: proc (target: GLenum) {.cdecl.}
  glGenFramebuffers*: proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl.}
  glGenRenderbuffers*: proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl.}
  glGenTextures*: proc (n: GLsizei, textures: ptr GLuint) {.cdecl.}
  glGetActiveAttrib*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl.}
  glGetActiveUniform*: proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl.}
  glGetAttachedShaders*: proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl.}
  glGetAttribLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl.}
  glGetBooleanv*: proc (pname: GLenum, data: ptr GLboolean) {.cdecl.}
  glGetBufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetError*: proc (): GLenum {.cdecl.}
  glGetFloatv*: proc (pname: GLenum, data: ptr GLfloat) {.cdecl.}
  glGetFramebufferAttachmentParameteriv*: proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetIntegerv*: proc (pname: GLenum, data: ptr GLint) {.cdecl.}
  glGetProgramiv*: proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetProgramInfoLog*: proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl.}
  glGetRenderbufferParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetShaderiv*: proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetShaderInfoLog*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl.}
  glGetShaderPrecisionFormat*: proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.cdecl.}
  glGetShaderSource*: proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl.}
  glGetString*: proc (name: GLenum): ptr GLubyte {.cdecl.}
  glGetTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl.}
  glGetTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetUniformfv*: proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl.}
  glGetUniformiv*: proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl.}
  glGetUniformLocation*: proc (program: GLuint, name: cstring): GLint {.cdecl.}
  glGetVertexAttribfv*: proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl.}
  glGetVertexAttribiv*: proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}
  glGetVertexAttribPointerv*: proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl.}
  glHint*: proc (target: GLenum, mode: GLenum) {.cdecl.}
  glIsBuffer*: proc (buffer: GLuint): GLboolean {.cdecl.}
  glIsEnabled*: proc (cap: GLenum): GLboolean {.cdecl.}
  glIsFramebuffer*: proc (framebuffer: GLuint): GLboolean {.cdecl.}
  glIsProgram*: proc (program: GLuint): GLboolean {.cdecl.}
  glIsRenderbuffer*: proc (renderbuffer: GLuint): GLboolean {.cdecl.}
  glIsShader*: proc (shader: GLuint): GLboolean {.cdecl.}
  glIsTexture*: proc (texture: GLuint): GLboolean {.cdecl.}
  glLineWidth*: proc (width: GLfloat) {.cdecl.}
  glLinkProgram*: proc (program: GLuint) {.cdecl.}
  glPixelStorei*: proc (pname: GLenum, param: GLint) {.cdecl.}
  glPolygonOffset*: proc (factor: GLfloat, units: GLfloat) {.cdecl.}
  glReadPixels*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glReleaseShaderCompiler*: proc () {.cdecl.}
  glRenderbufferStorage*: proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl.}
  glSampleCoverage*: proc (value: GLfloat, invert: GLboolean) {.cdecl.}
  glScissor*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}
  glShaderBinary*: proc (count: GLsizei, shaders: ptr GLuint, binaryformat: GLenum, binary: pointer, length: GLsizei) {.cdecl.}
  glShaderSource*: proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl.}
  glStencilFunc*: proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl.}
  glStencilFuncSeparate*: proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl.}
  glStencilMask*: proc (mask: GLuint) {.cdecl.}
  glStencilMaskSeparate*: proc (face: GLenum, mask: GLuint) {.cdecl.}
  glStencilOp*: proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl.}
  glStencilOpSeparate*: proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl.}
  glTexImage2D*: proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glTexParameterf*: proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl.}
  glTexParameterfv*: proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl.}
  glTexParameteri*: proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl.}
  glTexParameteriv*: proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}
  glTexSubImage2D*: proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}
  glUniform1f*: proc (location: GLint, v0: GLfloat) {.cdecl.}
  glUniform1fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}
  glUniform1i*: proc (location: GLint, v0: GLint) {.cdecl.}
  glUniform1iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}
  glUniform2f*: proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl.}
  glUniform2fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}
  glUniform2i*: proc (location: GLint, v0: GLint, v1: GLint) {.cdecl.}
  glUniform2iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}
  glUniform3f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl.}
  glUniform3fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}
  glUniform3i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl.}
  glUniform3iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}
  glUniform4f*: proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl.}
  glUniform4fv*: proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}
  glUniform4i*: proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl.}
  glUniform4iv*: proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}
  glUniformMatrix2fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUniformMatrix3fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUniformMatrix4fv*: proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}
  glUseProgram*: proc (program: GLuint) {.cdecl.}
  glValidateProgram*: proc (program: GLuint) {.cdecl.}
  glVertexAttrib1f*: proc (index: GLuint, x: GLfloat) {.cdecl.}
  glVertexAttrib1fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl.}
  glVertexAttrib2f*: proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl.}
  glVertexAttrib2fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl.}
  glVertexAttrib3f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl.}
  glVertexAttrib3fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl.}
  glVertexAttrib4f*: proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl.}
  glVertexAttrib4fv*: proc (index: GLuint, v: ptr GLfloat) {.cdecl.}
  glVertexAttribPointer*: proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl.}
  glViewport*: proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}


# Extensions
var
  GLAD_GL_KHR_debug*: bool
  GL_DEBUG_OUTPUT_SYNCHRONOUS*: GLenum = GLenum(0x8242)
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH*: GLenum = GLenum(0x8243)
  GL_DEBUG_CALLBACK_FUNCTION*: GLenum = GLenum(0x8244)
  GL_DEBUG_CALLBACK_USER_PARAM*: GLenum = GLenum(0x8245)
  GL_DEBUG_SOURCE_API*: GLenum = GLenum(0x8246)
  GL_DEBUG_SOURCE_WINDOW_SYSTEM*: GLenum = GLenum(0x8247)
  GL_DEBUG_SOURCE_SHADER_COMPILER*: GLenum = GLenum(0x8248)
  GL_DEBUG_SOURCE_THIRD_PARTY*: GLenum = GLenum(0x8249)
  GL_DEBUG_SOURCE_APPLICATION*: GLenum = GLenum(0x824A)
  GL_DEBUG_SOURCE_OTHER*: GLenum = GLenum(0x824B)
  GL_DEBUG_TYPE_ERROR*: GLenum = GLenum(0x824C)
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR*: GLenum = GLenum(0x824D)
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR*: GLenum = GLenum(0x824E)
  GL_DEBUG_TYPE_PORTABILITY*: GLenum = GLenum(0x824F)
  GL_DEBUG_TYPE_PERFORMANCE*: GLenum = GLenum(0x8250)
  GL_DEBUG_TYPE_OTHER*: GLenum = GLenum(0x8251)
  GL_DEBUG_TYPE_MARKER*: GLenum = GLenum(0x8268)
  GL_DEBUG_TYPE_PUSH_GROUP*: GLenum = GLenum(0x8269)
  GL_DEBUG_TYPE_POP_GROUP*: GLenum = GLenum(0x826A)
  GL_DEBUG_SEVERITY_NOTIFICATION*: GLenum = GLenum(0x826B)
  GL_MAX_DEBUG_GROUP_STACK_DEPTH*: GLenum = GLenum(0x826C)
  GL_DEBUG_GROUP_STACK_DEPTH*: GLenum = GLenum(0x826D)
  GL_BUFFER*: GLenum = GLenum(0x82E0)
  GL_SHADER*: GLenum = GLenum(0x82E1)
  GL_PROGRAM*: GLenum = GLenum(0x82E2)
  GL_VERTEX_ARRAY*: GLenum = GLenum(0x8074)
  GL_QUERY*: GLenum = GLenum(0x82E3)
  GL_PROGRAM_PIPELINE*: GLenum = GLenum(0x82E4)
  GL_SAMPLER*: GLenum = GLenum(0x82E6)
  GL_MAX_LABEL_LENGTH*: GLenum = GLenum(0x82E8)
  GL_MAX_DEBUG_MESSAGE_LENGTH*: GLenum = GLenum(0x9143)
  GL_MAX_DEBUG_LOGGED_MESSAGES*: GLenum = GLenum(0x9144)
  GL_DEBUG_LOGGED_MESSAGES*: GLenum = GLenum(0x9145)
  GL_DEBUG_SEVERITY_HIGH*: GLenum = GLenum(0x9146)
  GL_DEBUG_SEVERITY_MEDIUM*: GLenum = GLenum(0x9147)
  GL_DEBUG_SEVERITY_LOW*: GLenum = GLenum(0x9148)
  GL_DEBUG_OUTPUT*: GLenum = GLenum(0x92E0)
  GL_CONTEXT_FLAG_DEBUG_BIT*: GLenum = GLenum(0x00000002)
  GL_STACK_OVERFLOW*: GLenum = GLenum(0x0503)
  GL_STACK_UNDERFLOW*: GLenum = GLenum(0x0504)
  GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR*: GLenum = GLenum(0x8242)
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR*: GLenum = GLenum(0x8243)
  GL_DEBUG_CALLBACK_FUNCTION_KHR*: GLenum = GLenum(0x8244)
  GL_DEBUG_CALLBACK_USER_PARAM_KHR*: GLenum = GLenum(0x8245)
  GL_DEBUG_SOURCE_API_KHR*: GLenum = GLenum(0x8246)
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR*: GLenum = GLenum(0x8247)
  GL_DEBUG_SOURCE_SHADER_COMPILER_KHR*: GLenum = GLenum(0x8248)
  GL_DEBUG_SOURCE_THIRD_PARTY_KHR*: GLenum = GLenum(0x8249)
  GL_DEBUG_SOURCE_APPLICATION_KHR*: GLenum = GLenum(0x824A)
  GL_DEBUG_SOURCE_OTHER_KHR*: GLenum = GLenum(0x824B)
  GL_DEBUG_TYPE_ERROR_KHR*: GLenum = GLenum(0x824C)
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR*: GLenum = GLenum(0x824D)
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR*: GLenum = GLenum(0x824E)
  GL_DEBUG_TYPE_PORTABILITY_KHR*: GLenum = GLenum(0x824F)
  GL_DEBUG_TYPE_PERFORMANCE_KHR*: GLenum = GLenum(0x8250)
  GL_DEBUG_TYPE_OTHER_KHR*: GLenum = GLenum(0x8251)
  GL_DEBUG_TYPE_MARKER_KHR*: GLenum = GLenum(0x8268)
  GL_DEBUG_TYPE_PUSH_GROUP_KHR*: GLenum = GLenum(0x8269)
  GL_DEBUG_TYPE_POP_GROUP_KHR*: GLenum = GLenum(0x826A)
  GL_DEBUG_SEVERITY_NOTIFICATION_KHR*: GLenum = GLenum(0x826B)
  GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR*: GLenum = GLenum(0x826C)
  GL_DEBUG_GROUP_STACK_DEPTH_KHR*: GLenum = GLenum(0x826D)
  GL_BUFFER_KHR*: GLenum = GLenum(0x82E0)
  GL_SHADER_KHR*: GLenum = GLenum(0x82E1)
  GL_PROGRAM_KHR*: GLenum = GLenum(0x82E2)
  GL_VERTEX_ARRAY_KHR*: GLenum = GLenum(0x8074)
  GL_QUERY_KHR*: GLenum = GLenum(0x82E3)
  GL_PROGRAM_PIPELINE_KHR*: GLenum = GLenum(0x82E4)
  GL_SAMPLER_KHR*: GLenum = GLenum(0x82E6)
  GL_MAX_LABEL_LENGTH_KHR*: GLenum = GLenum(0x82E8)
  GL_MAX_DEBUG_MESSAGE_LENGTH_KHR*: GLenum = GLenum(0x9143)
  GL_MAX_DEBUG_LOGGED_MESSAGES_KHR*: GLenum = GLenum(0x9144)
  GL_DEBUG_LOGGED_MESSAGES_KHR*: GLenum = GLenum(0x9145)
  GL_DEBUG_SEVERITY_HIGH_KHR*: GLenum = GLenum(0x9146)
  GL_DEBUG_SEVERITY_MEDIUM_KHR*: GLenum = GLenum(0x9147)
  GL_DEBUG_SEVERITY_LOW_KHR*: GLenum = GLenum(0x9148)
  GL_DEBUG_OUTPUT_KHR*: GLenum = GLenum(0x92E0)
  GL_CONTEXT_FLAG_DEBUG_BIT_KHR*: GLenum = GLenum(0x00000002)
  GL_STACK_OVERFLOW_KHR*: GLenum = GLenum(0x0503)
  GL_STACK_UNDERFLOW_KHR*: GLenum = GLenum(0x0504)
  GL_DISPLAY_LIST*: GLenum = GLenum(0x82E7)

  glDebugMessageControl*: proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.cdecl.}
  glDebugMessageInsert*: proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.cdecl.}
  glDebugMessageCallback*: proc (callback: GLDEBUGPROC, userParam: pointer) {.cdecl.}
  glGetDebugMessageLog*: proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.cdecl.}
  glPushDebugGroup*: proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.cdecl.}
  glPopDebugGroup*: proc () {.cdecl.}
  glObjectLabel*: proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.cdecl.}
  glGetObjectLabel*: proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl.}
  glObjectPtrLabel*: proc (`ptr`: pointer, length: GLsizei, label: cstring) {.cdecl.}
  glGetObjectPtrLabel*: proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl.}
  glGetPointerv*: proc (pname: GLenum, params: ptr pointer) {.cdecl.}
  glDebugMessageControlKHR*: proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.cdecl.}
  glDebugMessageInsertKHR*: proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.cdecl.}
  glDebugMessageCallbackKHR*: proc (callback: GLDEBUGPROCKHR, userParam: pointer) {.cdecl.}
  glGetDebugMessageLogKHR*: proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.cdecl.}
  glPushDebugGroupKHR*: proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.cdecl.}
  glPopDebugGroupKHR*: proc () {.cdecl.}
  glObjectLabelKHR*: proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.cdecl.}
  glGetObjectLabelKHR*: proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl.}
  glObjectPtrLabelKHR*: proc (`ptr`: pointer, length: GLsizei, label: cstring) {.cdecl.}
  glGetObjectPtrLabelKHR*: proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl.}
  glGetPointervKHR*: proc (pname: GLenum, params: ptr pointer) {.cdecl.}


proc load_GL_ES_VERSION_2_0(load: proc) =
  if not GLAD_GL_ES_VERSION_2_0: return

  glActiveTexture = cast[proc (texture: GLenum) {.cdecl.}](load("glActiveTexture"))
  glAttachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl.}](load("glAttachShader"))
  glBindAttribLocation = cast[proc (program: GLuint, index: GLuint, name: cstring) {.cdecl.}](load("glBindAttribLocation"))
  glBindBuffer = cast[proc (target: GLenum, buffer: GLuint) {.cdecl.}](load("glBindBuffer"))
  glBindFramebuffer = cast[proc (target: GLenum, framebuffer: GLuint) {.cdecl.}](load("glBindFramebuffer"))
  glBindRenderbuffer = cast[proc (target: GLenum, renderbuffer: GLuint) {.cdecl.}](load("glBindRenderbuffer"))
  glBindTexture = cast[proc (target: GLenum, texture: GLuint) {.cdecl.}](load("glBindTexture"))
  glBlendColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}](load("glBlendColor"))
  glBlendEquation = cast[proc (mode: GLenum) {.cdecl.}](load("glBlendEquation"))
  glBlendEquationSeparate = cast[proc (modeRGB: GLenum, modeAlpha: GLenum) {.cdecl.}](load("glBlendEquationSeparate"))
  glBlendFunc = cast[proc (sfactor: GLenum, dfactor: GLenum) {.cdecl.}](load("glBlendFunc"))
  glBlendFuncSeparate = cast[proc (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) {.cdecl.}](load("glBlendFuncSeparate"))
  glBufferData = cast[proc (target: GLenum, size: GLsizeiptr, data: pointer, usage: GLenum) {.cdecl.}](load("glBufferData"))
  glBufferSubData = cast[proc (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: pointer) {.cdecl.}](load("glBufferSubData"))
  glCheckFramebufferStatus = cast[proc (target: GLenum): GLenum {.cdecl.}](load("glCheckFramebufferStatus"))
  glClear = cast[proc (mask: GLbitfield) {.cdecl.}](load("glClear"))
  glClearColor = cast[proc (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) {.cdecl.}](load("glClearColor"))
  glClearDepthf = cast[proc (d: GLfloat) {.cdecl.}](load("glClearDepthf"))
  glClearStencil = cast[proc (s: GLint) {.cdecl.}](load("glClearStencil"))
  glColorMask = cast[proc (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) {.cdecl.}](load("glColorMask"))
  glCompileShader = cast[proc (shader: GLuint) {.cdecl.}](load("glCompileShader"))
  glCompressedTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: pointer) {.cdecl.}](load("glCompressedTexImage2D"))
  glCompressedTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: pointer) {.cdecl.}](load("glCompressedTexSubImage2D"))
  glCopyTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) {.cdecl.}](load("glCopyTexImage2D"))
  glCopyTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}](load("glCopyTexSubImage2D"))
  glCreateProgram = cast[proc (): GLuint {.cdecl.}](load("glCreateProgram"))
  glCreateShader = cast[proc (`type`: GLenum): GLuint {.cdecl.}](load("glCreateShader"))
  glCullFace = cast[proc (mode: GLenum) {.cdecl.}](load("glCullFace"))
  glDeleteBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl.}](load("glDeleteBuffers"))
  glDeleteFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl.}](load("glDeleteFramebuffers"))
  glDeleteProgram = cast[proc (program: GLuint) {.cdecl.}](load("glDeleteProgram"))
  glDeleteRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl.}](load("glDeleteRenderbuffers"))
  glDeleteShader = cast[proc (shader: GLuint) {.cdecl.}](load("glDeleteShader"))
  glDeleteTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl.}](load("glDeleteTextures"))
  glDepthFunc = cast[proc (`func`: GLenum) {.cdecl.}](load("glDepthFunc"))
  glDepthMask = cast[proc (flag: GLboolean) {.cdecl.}](load("glDepthMask"))
  glDepthRangef = cast[proc (n: GLfloat, f: GLfloat) {.cdecl.}](load("glDepthRangef"))
  glDetachShader = cast[proc (program: GLuint, shader: GLuint) {.cdecl.}](load("glDetachShader"))
  glDisable = cast[proc (cap: GLenum) {.cdecl.}](load("glDisable"))
  glDisableVertexAttribArray = cast[proc (index: GLuint) {.cdecl.}](load("glDisableVertexAttribArray"))
  glDrawArrays = cast[proc (mode: GLenum, first: GLint, count: GLsizei) {.cdecl.}](load("glDrawArrays"))
  glDrawElements = cast[proc (mode: GLenum, count: GLsizei, `type`: GLenum, indices: pointer) {.cdecl.}](load("glDrawElements"))
  glEnable = cast[proc (cap: GLenum) {.cdecl.}](load("glEnable"))
  glEnableVertexAttribArray = cast[proc (index: GLuint) {.cdecl.}](load("glEnableVertexAttribArray"))
  glFinish = cast[proc () {.cdecl.}](load("glFinish"))
  glFlush = cast[proc () {.cdecl.}](load("glFlush"))
  glFramebufferRenderbuffer = cast[proc (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) {.cdecl.}](load("glFramebufferRenderbuffer"))
  glFramebufferTexture2D = cast[proc (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) {.cdecl.}](load("glFramebufferTexture2D"))
  glFrontFace = cast[proc (mode: GLenum) {.cdecl.}](load("glFrontFace"))
  glGenBuffers = cast[proc (n: GLsizei, buffers: ptr GLuint) {.cdecl.}](load("glGenBuffers"))
  glGenerateMipmap = cast[proc (target: GLenum) {.cdecl.}](load("glGenerateMipmap"))
  glGenFramebuffers = cast[proc (n: GLsizei, framebuffers: ptr GLuint) {.cdecl.}](load("glGenFramebuffers"))
  glGenRenderbuffers = cast[proc (n: GLsizei, renderbuffers: ptr GLuint) {.cdecl.}](load("glGenRenderbuffers"))
  glGenTextures = cast[proc (n: GLsizei, textures: ptr GLuint) {.cdecl.}](load("glGenTextures"))
  glGetActiveAttrib = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl.}](load("glGetActiveAttrib"))
  glGetActiveUniform = cast[proc (program: GLuint, index: GLuint, bufSize: GLsizei, length: ptr GLsizei, size: ptr GLint, `type`: ptr GLenum, name: cstring) {.cdecl.}](load("glGetActiveUniform"))
  glGetAttachedShaders = cast[proc (program: GLuint, maxCount: GLsizei, count: ptr GLsizei, shaders: ptr GLuint) {.cdecl.}](load("glGetAttachedShaders"))
  glGetAttribLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl.}](load("glGetAttribLocation"))
  glGetBooleanv = cast[proc (pname: GLenum, data: ptr GLboolean) {.cdecl.}](load("glGetBooleanv"))
  glGetBufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetBufferParameteriv"))
  glGetError = cast[proc (): GLenum {.cdecl.}](load("glGetError"))
  glGetFloatv = cast[proc (pname: GLenum, data: ptr GLfloat) {.cdecl.}](load("glGetFloatv"))
  glGetFramebufferAttachmentParameteriv = cast[proc (target: GLenum, attachment: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetFramebufferAttachmentParameteriv"))
  glGetIntegerv = cast[proc (pname: GLenum, data: ptr GLint) {.cdecl.}](load("glGetIntegerv"))
  glGetProgramiv = cast[proc (program: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetProgramiv"))
  glGetProgramInfoLog = cast[proc (program: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl.}](load("glGetProgramInfoLog"))
  glGetRenderbufferParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetRenderbufferParameteriv"))
  glGetShaderiv = cast[proc (shader: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetShaderiv"))
  glGetShaderInfoLog = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, infoLog: cstring) {.cdecl.}](load("glGetShaderInfoLog"))
  glGetShaderPrecisionFormat = cast[proc (shadertype: GLenum, precisiontype: GLenum, range: ptr GLint, precision: ptr GLint) {.cdecl.}](load("glGetShaderPrecisionFormat"))
  glGetShaderSource = cast[proc (shader: GLuint, bufSize: GLsizei, length: ptr GLsizei, source: cstring) {.cdecl.}](load("glGetShaderSource"))
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl.}](load("glGetString"))
  glGetTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl.}](load("glGetTexParameterfv"))
  glGetTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetTexParameteriv"))
  glGetUniformfv = cast[proc (program: GLuint, location: GLint, params: ptr GLfloat) {.cdecl.}](load("glGetUniformfv"))
  glGetUniformiv = cast[proc (program: GLuint, location: GLint, params: ptr GLint) {.cdecl.}](load("glGetUniformiv"))
  glGetUniformLocation = cast[proc (program: GLuint, name: cstring): GLint {.cdecl.}](load("glGetUniformLocation"))
  glGetVertexAttribfv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLfloat) {.cdecl.}](load("glGetVertexAttribfv"))
  glGetVertexAttribiv = cast[proc (index: GLuint, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glGetVertexAttribiv"))
  glGetVertexAttribPointerv = cast[proc (index: GLuint, pname: GLenum, pointer: ptr pointer) {.cdecl.}](load("glGetVertexAttribPointerv"))
  glHint = cast[proc (target: GLenum, mode: GLenum) {.cdecl.}](load("glHint"))
  glIsBuffer = cast[proc (buffer: GLuint): GLboolean {.cdecl.}](load("glIsBuffer"))
  glIsEnabled = cast[proc (cap: GLenum): GLboolean {.cdecl.}](load("glIsEnabled"))
  glIsFramebuffer = cast[proc (framebuffer: GLuint): GLboolean {.cdecl.}](load("glIsFramebuffer"))
  glIsProgram = cast[proc (program: GLuint): GLboolean {.cdecl.}](load("glIsProgram"))
  glIsRenderbuffer = cast[proc (renderbuffer: GLuint): GLboolean {.cdecl.}](load("glIsRenderbuffer"))
  glIsShader = cast[proc (shader: GLuint): GLboolean {.cdecl.}](load("glIsShader"))
  glIsTexture = cast[proc (texture: GLuint): GLboolean {.cdecl.}](load("glIsTexture"))
  glLineWidth = cast[proc (width: GLfloat) {.cdecl.}](load("glLineWidth"))
  glLinkProgram = cast[proc (program: GLuint) {.cdecl.}](load("glLinkProgram"))
  glPixelStorei = cast[proc (pname: GLenum, param: GLint) {.cdecl.}](load("glPixelStorei"))
  glPolygonOffset = cast[proc (factor: GLfloat, units: GLfloat) {.cdecl.}](load("glPolygonOffset"))
  glReadPixels = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glReadPixels"))
  glReleaseShaderCompiler = cast[proc () {.cdecl.}](load("glReleaseShaderCompiler"))
  glRenderbufferStorage = cast[proc (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) {.cdecl.}](load("glRenderbufferStorage"))
  glSampleCoverage = cast[proc (value: GLfloat, invert: GLboolean) {.cdecl.}](load("glSampleCoverage"))
  glScissor = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}](load("glScissor"))
  glShaderBinary = cast[proc (count: GLsizei, shaders: ptr GLuint, binaryformat: GLenum, binary: pointer, length: GLsizei) {.cdecl.}](load("glShaderBinary"))
  glShaderSource = cast[proc (shader: GLuint, count: GLsizei, string: cstringArray, length: ptr GLint) {.cdecl.}](load("glShaderSource"))
  glStencilFunc = cast[proc (`func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl.}](load("glStencilFunc"))
  glStencilFuncSeparate = cast[proc (face: GLenum, `func`: GLenum, `ref`: GLint, mask: GLuint) {.cdecl.}](load("glStencilFuncSeparate"))
  glStencilMask = cast[proc (mask: GLuint) {.cdecl.}](load("glStencilMask"))
  glStencilMaskSeparate = cast[proc (face: GLenum, mask: GLuint) {.cdecl.}](load("glStencilMaskSeparate"))
  glStencilOp = cast[proc (fail: GLenum, zfail: GLenum, zpass: GLenum) {.cdecl.}](load("glStencilOp"))
  glStencilOpSeparate = cast[proc (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) {.cdecl.}](load("glStencilOpSeparate"))
  glTexImage2D = cast[proc (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glTexImage2D"))
  glTexParameterf = cast[proc (target: GLenum, pname: GLenum, param: GLfloat) {.cdecl.}](load("glTexParameterf"))
  glTexParameterfv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLfloat) {.cdecl.}](load("glTexParameterfv"))
  glTexParameteri = cast[proc (target: GLenum, pname: GLenum, param: GLint) {.cdecl.}](load("glTexParameteri"))
  glTexParameteriv = cast[proc (target: GLenum, pname: GLenum, params: ptr GLint) {.cdecl.}](load("glTexParameteriv"))
  glTexSubImage2D = cast[proc (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, `type`: GLenum, pixels: pointer) {.cdecl.}](load("glTexSubImage2D"))
  glUniform1f = cast[proc (location: GLint, v0: GLfloat) {.cdecl.}](load("glUniform1f"))
  glUniform1fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}](load("glUniform1fv"))
  glUniform1i = cast[proc (location: GLint, v0: GLint) {.cdecl.}](load("glUniform1i"))
  glUniform1iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}](load("glUniform1iv"))
  glUniform2f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat) {.cdecl.}](load("glUniform2f"))
  glUniform2fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}](load("glUniform2fv"))
  glUniform2i = cast[proc (location: GLint, v0: GLint, v1: GLint) {.cdecl.}](load("glUniform2i"))
  glUniform2iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}](load("glUniform2iv"))
  glUniform3f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) {.cdecl.}](load("glUniform3f"))
  glUniform3fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}](load("glUniform3fv"))
  glUniform3i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint) {.cdecl.}](load("glUniform3i"))
  glUniform3iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}](load("glUniform3iv"))
  glUniform4f = cast[proc (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) {.cdecl.}](load("glUniform4f"))
  glUniform4fv = cast[proc (location: GLint, count: GLsizei, value: ptr GLfloat) {.cdecl.}](load("glUniform4fv"))
  glUniform4i = cast[proc (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) {.cdecl.}](load("glUniform4i"))
  glUniform4iv = cast[proc (location: GLint, count: GLsizei, value: ptr GLint) {.cdecl.}](load("glUniform4iv"))
  glUniformMatrix2fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix2fv"))
  glUniformMatrix3fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix3fv"))
  glUniformMatrix4fv = cast[proc (location: GLint, count: GLsizei, transpose: GLboolean, value: ptr GLfloat) {.cdecl.}](load("glUniformMatrix4fv"))
  glUseProgram = cast[proc (program: GLuint) {.cdecl.}](load("glUseProgram"))
  glValidateProgram = cast[proc (program: GLuint) {.cdecl.}](load("glValidateProgram"))
  glVertexAttrib1f = cast[proc (index: GLuint, x: GLfloat) {.cdecl.}](load("glVertexAttrib1f"))
  glVertexAttrib1fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl.}](load("glVertexAttrib1fv"))
  glVertexAttrib2f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat) {.cdecl.}](load("glVertexAttrib2f"))
  glVertexAttrib2fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl.}](load("glVertexAttrib2fv"))
  glVertexAttrib3f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) {.cdecl.}](load("glVertexAttrib3f"))
  glVertexAttrib3fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl.}](load("glVertexAttrib3fv"))
  glVertexAttrib4f = cast[proc (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) {.cdecl.}](load("glVertexAttrib4f"))
  glVertexAttrib4fv = cast[proc (index: GLuint, v: ptr GLfloat) {.cdecl.}](load("glVertexAttrib4fv"))
  glVertexAttribPointer = cast[proc (index: GLuint, size: GLint, `type`: GLenum, normalized: GLboolean, stride: GLsizei, pointer: pointer) {.cdecl.}](load("glVertexAttribPointer"))
  glViewport = cast[proc (x: GLint, y: GLint, width: GLsizei, height: GLsizei) {.cdecl.}](load("glViewport"))


proc load_GL_KHR_debug(load: proc) =
  if not GLAD_GL_KHR_debug: return
  glDebugMessageControl = cast[proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.cdecl.}](load("glDebugMessageControl"))
  glDebugMessageInsert = cast[proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.cdecl.}](load("glDebugMessageInsert"))
  glDebugMessageCallback = cast[proc (callback: GLDEBUGPROC, userParam: pointer) {.cdecl.}](load("glDebugMessageCallback"))
  glGetDebugMessageLog = cast[proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.cdecl.}](load("glGetDebugMessageLog"))
  glPushDebugGroup = cast[proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.cdecl.}](load("glPushDebugGroup"))
  glPopDebugGroup = cast[proc () {.cdecl.}](load("glPopDebugGroup"))
  glObjectLabel = cast[proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.cdecl.}](load("glObjectLabel"))
  glGetObjectLabel = cast[proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl.}](load("glGetObjectLabel"))
  glObjectPtrLabel = cast[proc (`ptr`: pointer, length: GLsizei, label: cstring) {.cdecl.}](load("glObjectPtrLabel"))
  glGetObjectPtrLabel = cast[proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl.}](load("glGetObjectPtrLabel"))
  glGetPointerv = cast[proc (pname: GLenum, params: ptr pointer) {.cdecl.}](load("glGetPointerv"))
  glDebugMessageControlKHR = cast[proc (source: GLenum, `type`: GLenum, severity: GLenum, count: GLsizei, ids: ptr GLuint, enabled: GLboolean) {.cdecl.}](load("glDebugMessageControlKHR"))
  glDebugMessageInsertKHR = cast[proc (source: GLenum, `type`: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: cstring) {.cdecl.}](load("glDebugMessageInsertKHR"))
  glDebugMessageCallbackKHR = cast[proc (callback: GLDEBUGPROCKHR, userParam: pointer) {.cdecl.}](load("glDebugMessageCallbackKHR"))
  glGetDebugMessageLogKHR = cast[proc (count: GLuint, bufSize: GLsizei, sources: ptr GLenum, types: ptr GLenum, ids: ptr GLuint, severities: ptr GLenum, lengths: ptr GLsizei, messageLog: cstring): GLuint {.cdecl.}](load("glGetDebugMessageLogKHR"))
  glPushDebugGroupKHR = cast[proc (source: GLenum, id: GLuint, length: GLsizei, message: cstring) {.cdecl.}](load("glPushDebugGroupKHR"))
  glPopDebugGroupKHR = cast[proc () {.cdecl.}](load("glPopDebugGroupKHR"))
  glObjectLabelKHR = cast[proc (identifier: GLenum, name: GLuint, length: GLsizei, label: cstring) {.cdecl.}](load("glObjectLabelKHR"))
  glGetObjectLabelKHR = cast[proc (identifier: GLenum, name: GLuint, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl.}](load("glGetObjectLabelKHR"))
  glObjectPtrLabelKHR = cast[proc (`ptr`: pointer, length: GLsizei, label: cstring) {.cdecl.}](load("glObjectPtrLabelKHR"))
  glGetObjectPtrLabelKHR = cast[proc (`ptr`: pointer, bufSize: GLsizei, length: ptr GLsizei, label: cstring) {.cdecl.}](load("glGetObjectPtrLabelKHR"))
  glGetPointervKHR = cast[proc (pname: GLenum, params: ptr pointer) {.cdecl.}](load("glGetPointervKHR"))


proc findExtensionsGLES2() =
  # if this throws a kernel panic, this means their graphics card is obsolete
  # and they shall not play rapid games
  GLAD_GL_KHR_debug = true
  discard


proc findCoreGLES2(glVersion: string) =
  # Thank you @elmindreda
  # https://github.com/elmindreda/greg/blob/master/templates/greg.c.in#L176
  # https://github.com/glfw/glfw/blob/master/src/context.c#L36
  var prefixes = ["OpenGL ES-CM ", "OpenGL ES-CL ", "OpenGL ES "]

  var version = glVersion
  for p in prefixes:
    if version.startsWith(p):
      version = version.replace(p)
      break

  var major = ord(glVersion[0]) - ord('0')
  var minor = ord(glVersion[2]) - ord('0')

  glVersionMajor = major
  glVersionMinor = minor

  GLAD_GL_ES_VERSION_2_0 = (major == 2 and minor >= 0) or major > 2


proc gladLoadGLES2*(load: proc): bool =
  glGetString = cast[proc (name: GLenum): ptr GLubyte {.cdecl.}](load("glGetString"))
  if glGetString == nil: return false

  var glVersion = cast[cstring](glGetString(GL_VERSION))
  if glVersion == nil: return false

  findCoreGLES2($glVersion)

  load_GL_ES_VERSION_2_0(load)

  findExtensionsGLES2()

  load_GL_KHR_debug(load);

  return glVersionMajor != 0 or glVersionMinor != 0
